
ADC_Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000089  00000000  00000000  0000012b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000050  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ba  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c8  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
// Reading ADC using polling
#include <avr/io.h>	//standard AVR header
int main (void){
	unsigned int data;
	DDRB = 0xFF;	// make Port B an output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;	// make Port C an output
  70:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;	// make Port D an output
  72:	81 bb       	out	0x11, r24	; 17
	DDRA = 0;	    // make Port A an input for ADC input
  74:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;  // make ADC enable and select CLK/128
  76:	87 e8       	ldi	r24, 0x87	; 135
  78:	86 b9       	out	0x06, r24	; 6
	// 2.56V Vref internal, right justified,
	ADMUX = 0xC0; 	// select ADC Channel 0
  7a:	80 ec       	ldi	r24, 0xC0	; 192
  7c:	87 b9       	out	0x07, r24	; 7
	while (1){
		ADCSRA |= (1<<ADSC);		// start conversion
  7e:	36 9a       	sbi	0x06, 6	; 6
		while ( (ADCSRA & (1<<ADIF) )== 0 );
  80:	34 9b       	sbis	0x06, 4	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x14>
		// wait for conversion to finish
		data  = ADC;
  84:	84 b1       	in	r24, 0x04	; 4
  86:	95 b1       	in	r25, 0x05	; 5
		PORTD = data;		// give the low  byte to PORTD
  88:	82 bb       	out	0x12, r24	; 18
		PORTC = data >> 8;	// give the high byte to PORTB
  8a:	95 bb       	out	0x15, r25	; 21
		PORTB = data >> 2;  // if u need only 8-bit value
  8c:	96 95       	lsr	r25
  8e:	87 95       	ror	r24
  90:	96 95       	lsr	r25
  92:	87 95       	ror	r24
  94:	88 bb       	out	0x18, r24	; 24
  96:	f3 cf       	rjmp	.-26     	; 0x7e <main+0x12>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
