
INT0_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000048  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b1  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000054  00000000  00000000  0000025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d5  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bb  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__vector_1>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_2>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "avr/io.h"
#include "avr/interrupt.h"

int main (){
	DDRA  = 0xFF;  	// PA as an output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	MCUCR = 0x00; 		// make INT0 and INT1 low level triggered
  70:	15 be       	out	0x35, r1	; 53
	MCUCSR = (1<<ISC2);	// make INT2 rising edge triggered
  72:	80 e4       	ldi	r24, 0x40	; 64
  74:	84 bf       	out	0x34, r24	; 52
	GICR  = (1<<INT0)|(1<<INT1)|(1<<INT2) ; 
  76:	80 ee       	ldi	r24, 0xE0	; 224
  78:	8b bf       	out	0x3b, r24	; 59
	// enable external interrupt 0,1,and 2
	sei (); 				// enable interrupts
  7a:	78 94       	sei
  7c:	ff cf       	rjmp	.-2      	; 0x7c <main+0x10>

0000007e <__vector_1>:
	while (1); 				// wait here
}
 
ISR (INT0_vect){ 		// ISR for external interrupt 0
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	PORTA ^= (1<<0) ; 	// toggle PORTA.0
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	89 27       	eor	r24, r25
  92:	8b bb       	out	0x1b, r24	; 27
	sei ();
  94:	78 94       	sei
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <__vector_2>:

ISR (INT1_vect){ 		// ISR for external interrupt 0
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	PORTA ^= (1<<1) ; 	// toggle PORTA.0
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	89 27       	eor	r24, r25
  b8:	8b bb       	out	0x1b, r24	; 27
}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_3>:

ISR (INT2_vect){ 		// ISR for external interrupt 0
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	PORTA ^= (1<<2) ; 	// toggle PORTA.0
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	89 27       	eor	r24, r25
  dc:	8b bb       	out	0x1b, r24	; 27
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
