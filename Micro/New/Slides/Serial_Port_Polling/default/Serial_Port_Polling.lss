
Serial_Port_Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000113  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c9  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000114  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cd  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Tx>:
#include <avr/io.h>
void Tx( unsigned char data ){
while ( !(UCSRA & (1<<UDRE)) ); 	// wait until UDR is empty
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <Tx>
    UDR = data;                      // Putting data into UDR, sends the data
  70:	8c b9       	out	0x0c, r24	; 12
}
  72:	08 95       	ret

00000074 <Rx>:
unsigned char Rx(){
    while ( !(UCSRA & (1<<RXC)) ); 	// wait for the Receive Complete (RXC) Flag
  74:	5f 9b       	sbis	0x0b, 7	; 11
  76:	fe cf       	rjmp	.-4      	; 0x74 <Rx>
    return UDR;                      // Get and return received data from buffer
  78:	8c b1       	in	r24, 0x0c	; 12
}
  7a:	08 95       	ret

0000007c <init_s>:
void init_s(){
    UCSRB = (1<<RXEN) |(1<<TXEN);    // Enable USART Receiver and Transmitter
  7c:	88 e1       	ldi	r24, 0x18	; 24
  7e:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1<<UCSZ1)|(1<<UCSZ0);   // Mode3: Use 8-bit data
  80:	86 e0       	ldi	r24, 0x06	; 6
  82:	80 bd       	out	0x20, r24	; 32
    UBRRL = 51;                      // For 1 MHz Crystal and 1200 baud rate
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
}
  88:	08 95       	ret

0000008a <main>:
int main(){
    DDRB = 0XFF; DDRD = 0XFE;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
  8e:	8e ef       	ldi	r24, 0xFE	; 254
  90:	81 bb       	out	0x11, r24	; 17
unsigned char Rx(){
    while ( !(UCSRA & (1<<RXC)) ); 	// wait for the Receive Complete (RXC) Flag
    return UDR;                      // Get and return received data from buffer
}
void init_s(){
    UCSRB = (1<<RXEN) |(1<<TXEN);    // Enable USART Receiver and Transmitter
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1<<UCSZ1)|(1<<UCSZ0);   // Mode3: Use 8-bit data
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 bd       	out	0x20, r24	; 32
    UBRRL = 51;                      // For 1 MHz Crystal and 1200 baud rate
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
void Tx( unsigned char data ){
while ( !(UCSRA & (1<<UDRE)) ); 	// wait until UDR is empty
    UDR = data;                      // Putting data into UDR, sends the data
}
unsigned char Rx(){
    while ( !(UCSRA & (1<<RXC)) ); 	// wait for the Receive Complete (RXC) Flag
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x14>
    return UDR;                      // Get and return received data from buffer
  a2:	8c b1       	in	r24, 0x0c	; 12
}
int main(){
    DDRB = 0XFF; DDRD = 0XFE;
    init_s();
    while(1){
        PORTB = Rx(); Tx(++PORTB);
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	88 b3       	in	r24, 0x18	; 24
#include <avr/io.h>
void Tx( unsigned char data ){
while ( !(UCSRA & (1<<UDRE)) ); 	// wait until UDR is empty
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x24>
    UDR = data;                      // Putting data into UDR, sends the data
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	f4 cf       	rjmp	.-24     	; 0x9e <main+0x14>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
